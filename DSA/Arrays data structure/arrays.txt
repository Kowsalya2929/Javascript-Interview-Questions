Arrays in Data Structure :

    [1]. Arrays is a ordered collections of data
    [2]. It stores multiple datatype values in a single variable

Types of Arrays :

    [1]. Numbers :-                eg : [1,2,3,4,5,6,7]
    [2]. Strings :-                eg : ["a","b","c","d"]
    [3]. Mixed :-                  eg : [1,"a","b",5]
    [4]. Objects :-                eg : [{name:"a"},{name:"b"}]
    [5]. Multidimensional :-       eg : [[1,3],[4,5]]

Two ways to create array :

    [1]. Using literal :-          eg : let arr1 = [1,2,4]
    [2]. Using constructor :-      eg : let arr2 = new Array(1,2,4)

Add & Remove Methods :

    [1]. Add item at the end :-
            Add one or more elements to the end of array.                                     eg : arr.push(2,3)                           
    [2]. Add item at the start :-  
            Add one or more elements to the begining of an array.                             eg : arr.unshift(2,9)
    [3]. Remove last item :-                                                                  eg : arr.pop()
    [4]. Remove first item :-                                                                 eg : arr.shift()
    [5]. splice is remove / replace / add elements :-  
            Modifies the original array. Splice(index,no of remove elements, add elements)    eg : arr.splice(0,1,"a","b")
    [6]. Non-mutating version of splice :- 
            Same as Splice , But returns a new array it doesn't modify the original array.    eg : arr.toSpliced(0,1,"a","b")

Mutation vs Non-mutation :
    
    [1]. Mutation :-        [1]. It means the original array is changed or modified.
                            [2]. In-place Change.
    [2]. Non-mutation :-    [1]. It doesn't change the original array returns new array.
                            [2]. Original stays same.


Sorting Methods :

    [1]. Sort alphabetically - (mutates)         eg : arr.sort() // ["apple","banana","chery"]
          arr = ["banana","chery","apple"]
    [2]. Sort numerically,(mutates)              eg : arr.sort() // Incorrect for numbers [1,100,40,5]
          arr = [40,5,100,1]                          arr.sort((a,b)=> a-b) ascending order // Correct numerical sort [1,5,40,100]
                                                      arr.sort((a,b)=> b-a) desending order // Correct numerical sort [100,40,5,1]
    [3]. toSorted - (Non-mutates)                eg : arr.toSorted()
          Returns new sorted array without changing original array.
    [4]. Reverse array - (mutatas)               eg : arr.reverse()
    [5]. Reverse array - (Non-mutates)           eg : arr.toReversed()
          Returns new reversed array without changing original array.

Search & Check Methods : (both are Non-mutates)

    [1]. Checks if the array contains specific content. return only true / false.          eg : arr.includes(2)
    [2]. Return the first index of value , or -1 if it's not found.                        eg : arr = ["a","b","c","a"]
          it will check (left to right).                                                        arr.indexOf("a")  //0
          -1 if it's not found.                                                                 arr.indexOf("z")  //-1
    [3]. If you wanna check (from right to left)                                           eg : arr.lastIndexOf("a") //3
    [4]. Returns the first element that satisfies the callback conditions.                 eg : arr.find(n => n > 2)
    [5]. Returns the first element index that satisfies the callback conditions.           eg : arr.findIndex(n => n > 2)
    [6]. At least one element passes the test.                                             eg : arr.some(n => n % 2 === 0)
    [7]. All element must passes the test.                                                 eg : arr.every(n => n % 2 === 0)

